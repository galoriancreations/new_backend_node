require('dotenv').config();

import fs from 'fs';
import { strict_output, type Article } from './strict_output';
import { UsersTest } from '../database';
import schedule from 'node-schedule';
import { sendMessageViaWhatsApp } from '../services/twilio';
import { sendMessageViaEmail } from '../services/nodemailer';

// Function to generate an article using the OpenAI CHATGPT-3 API
async function generateArticle({
  topic = 'a topic of your choice',
  wordsCount = 500,
}) {
  console.log('Generating article...');
  const response = await strict_output(
    `You are a helpful AI that is able to generate articles with title image and text, the length of the text should not be more than ${wordsCount} words, store article in a JSON array`,
    `You are to generate an article about ${topic}.`,
    {
      title: 'title',
      image: 'a link to relative image start with https://',
      text: `text not more than ${wordsCount} words`,
    },
    { verbose: true }
  );

  console.log('GPT Response:');
  console.log(response);

  return response;
}

// Function to generate and send articles to subscribers
export async function generateAndSendArticles(
  subscribers: { fullName?: string; phone?: string; email?: string }[]
) {
  // Generate article
  // const article = await generateArticle({ wordsCount: 100 });
  // Take the article from the file generated_article.json for less API calls and testing
  const article: Article = JSON.parse(
    fs.readFileSync('ArticleGenerator/genereted_article.json', 'utf8')
  );
  if (article === null) {
    return console.log('Error generating article');
  }

  // Send the article to each subscriber
  for (const subscriber of subscribers) {
    try {
      if (subscriber.phone) {
        const message = `Ting Global Weekly Article
Here's your weekly article:
  
  
${article.title}
  
${article.text}
  

This article was generated by Ting Global's AI Article Generator`;
        await sendMessageViaWhatsApp(
          message,
          [article.image],
          subscriber.fullName,
          subscriber.phone
        );
      }
      if (subscriber.email) {
        const message = `<html>
<head>
<meta charset="utf-8">
    <title>${article.title}</title>
</head>
<body style="font-family: Arial, sans-serif; background-color: #f2f2f2;">
    <div style="max-width: 600px; margin: 0 auto; background-color: #fff; padding: 20px;">
        <header style="text-align: center;">
            <h1 style="font-size: 36px; color: #333;">${article.title}</h1>
        </header>
        <img src="${article.image}" alt="Article Image" style="display: block; margin: 0 auto; max-width: 100%;">
        <p style="font-size: 18px; color: #666; line-height: 1.5; margin-top: 20px;">${article.text}</p>
    </div>
</body>
</html>`;
        await sendMessageViaEmail(message, subscriber.email);
      }
      console.log(
        `Article sent to ${subscriber?.fullName} (${subscriber?.phone} ${subscriber?.email})`
      );
    } catch (error) {
      console.error(
        `Error sending article to ${subscriber.fullName}: ${
          error instanceof Error ? error.message : 'Something went wrong'
        }`
      );
    }
  }
}

const fetchAllArticleSubscribedUsers = async () => {
  const users = await UsersTest.find(
    { articleSubscribed: true },
    { _id: 0, fullName: 1, phone: 1, email: 1 }
  );

  return users;
};

// Function that log all subscribed users that subscribe to article
async function sendArticleToAllSubscribers() {
  const users = await fetchAllArticleSubscribedUsers();

  const mappedUsers = users.map((user) => ({
    fullName: user?.fullName,
    phone: user?.phone,
    email: user?.email,
  }));

  generateAndSendArticles(mappedUsers);
}
sendArticleToAllSubscribers();

// Schedule the generateAndSendArticles function to run every Monday at 9:00 AM
/*
const rule = new schedule.RecurrenceRule();
rule.dayOfWeek = 1; // Monday
rule.hour = 9; // 9:00 AM
rule.minute = 0; // 00 seconds
const job = schedule.scheduleJob(rule, generateAndSendArticles);
console.log('Scheduled job to run every Monday at 9:00 AM');
*/
